// Mocks generated by Mockito 5.2.0 from annotations
// in pilll/test/helper/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i19;

import 'package:cloud_firestore/cloud_firestore.dart' as _i11;
import 'package:firebase_auth/firebase_auth.dart' as _i24;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pilll/analytics.dart' as _i20;
import 'package:pilll/database/batch.dart' as _i34;
import 'package:pilll/database/database.dart' as _i10;
import 'package:pilll/database/diary.dart' as _i21;
import 'package:pilll/database/menstruation.dart' as _i22;
import 'package:pilll/database/pill_sheet.dart' as _i16;
import 'package:pilll/database/pill_sheet_group.dart' as _i33;
import 'package:pilll/database/pill_sheet_modified_history.dart' as _i31;
import 'package:pilll/database/setting.dart' as _i18;
import 'package:pilll/database/user.dart' as _i25;
import 'package:pilll/domain/calendar/calendar_page_async_action.dart' as _i37;
import 'package:pilll/domain/menstruation/menstruation_page_async_action.dart'
    as _i35;
import 'package:pilll/domain/menstruation_edit/menstruation_edit_page_async_action.dart'
    as _i36;
import 'package:pilll/domain/premium_function_survey/premium_function_survey_element_type.dart'
    as _i26;
import 'package:pilll/domain/premium_introduction/premium_introduction_state.codegen.dart'
    as _i8;
import 'package:pilll/domain/premium_introduction/premium_introduction_store.dart'
    as _i29;
import 'package:pilll/domain/record/components/notification_bar/notification_bar_state.codegen.dart'
    as _i7;
import 'package:pilll/domain/record/components/notification_bar/state_notifier.dart'
    as _i27;
import 'package:pilll/domain/settings/setting_page_async_action.dart' as _i14;
import 'package:pilll/domain/settings/setting_page_state.codegen.dart' as _i41;
import 'package:pilll/domain/settings/setting_page_state_notifier.dart' as _i40;
import 'package:pilll/entity/diary.codegen.dart' as _i4;
import 'package:pilll/entity/diary_setting.codegen.dart' as _i46;
import 'package:pilll/entity/menstruation.codegen.dart' as _i5;
import 'package:pilll/entity/pill_sheet.codegen.dart' as _i2;
import 'package:pilll/entity/pill_sheet_group.codegen.dart' as _i9;
import 'package:pilll/entity/pill_sheet_modified_history.codegen.dart' as _i32;
import 'package:pilll/entity/pill_sheet_modified_history_value.codegen.dart'
    as _i38;
import 'package:pilll/entity/pill_sheet_type.dart' as _i39;
import 'package:pilll/entity/pilll_ads.codegen.dart' as _i48;
import 'package:pilll/entity/reminder_notification_customization.codegen.dart'
    as _i13;
import 'package:pilll/entity/schedule.codegen.dart' as _i47;
import 'package:pilll/entity/setting.codegen.dart' as _i3;
import 'package:pilll/entity/user.codegen.dart' as _i6;
import 'package:pilll/provider/pill_sheet.dart' as _i43;
import 'package:pilll/provider/pill_sheet_group.dart' as _i42;
import 'package:pilll/provider/pill_sheet_modified_history.dart' as _i44;
import 'package:pilll/provider/premium_and_trial.codegen.dart' as _i12;
import 'package:pilll/provider/setting.dart' as _i45;
import 'package:pilll/service/auth.dart' as _i23;
import 'package:pilll/service/day.dart' as _i17;
import 'package:purchases_flutter/purchases_flutter.dart' as _i30;
import 'package:riverpod/riverpod.dart' as _i15;
import 'package:state_notifier/state_notifier.dart' as _i28;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePillSheet_0 extends _i1.Fake implements _i2.PillSheet {}

class _FakeDateTime_1 extends _i1.Fake implements DateTime {}

class _FakeSetting_2 extends _i1.Fake implements _i3.Setting {}

class _FakeDiary_3 extends _i1.Fake implements _i4.Diary {}

class _FakeMenstruation_4 extends _i1.Fake implements _i5.Menstruation {}

class _FakeUser_5 extends _i1.Fake implements _i6.User {}

class _FakeNotificationBarState_6 extends _i1.Fake
    implements _i7.NotificationBarState {}

class _FakePremiumIntroductionState_7 extends _i1.Fake
    implements _i8.PremiumIntroductionState {}

class _FakePillSheetGroup_8 extends _i1.Fake implements _i9.PillSheetGroup {}

class _FakeDatabaseConnection_9 extends _i1.Fake
    implements _i10.DatabaseConnection {}

class _FakeWriteBatch_10 extends _i1.Fake implements _i11.WriteBatch {}

class _Fake$PremiumAndTrialCopyWith_11<$Res> extends _i1.Fake
    implements _i12.$PremiumAndTrialCopyWith<$Res> {}

class _FakeReminderNotificationCustomization_12 extends _i1.Fake
    implements _i13.ReminderNotificationCustomization {}

class _Fake$SettingCopyWith_13<$Res> extends _i1.Fake
    implements _i3.$SettingCopyWith<$Res> {}

class _FakeSettingPageAsyncAction_14 extends _i1.Fake
    implements _i14.SettingPageAsyncAction {}

class _FakeAsyncValue_15<T> extends _i1.Fake implements _i15.AsyncValue<T> {}

class _FakeDocumentReference_16<T extends Object?> extends _i1.Fake
    implements _i11.DocumentReference<T> {}

class _FakeCollectionReference_17<T extends Object?> extends _i1.Fake
    implements _i11.CollectionReference<T> {}

/// A class which mocks [PillSheetDatastore].
///
/// See the documentation for Mockito's code generation for more information.
class MockPillSheetDatastore extends _i1.Mock
    implements _i16.PillSheetDatastore {
  MockPillSheetDatastore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.PillSheet> register(
    _i11.WriteBatch? batch,
    List<_i2.PillSheet>? pillSheets,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            batch,
            pillSheets,
          ],
        ),
        returnValue: <_i2.PillSheet>[],
      ) as List<_i2.PillSheet>);
  @override
  _i2.PillSheet delete(
    _i11.WriteBatch? batch,
    _i2.PillSheet? pillSheet,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [
            batch,
            pillSheet,
          ],
        ),
        returnValue: _FakePillSheet_0(),
      ) as _i2.PillSheet);
  @override
  void update(
    _i11.WriteBatch? batch,
    List<_i2.PillSheet>? pillSheets,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [
            batch,
            pillSheets,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TodayService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodayService extends _i1.Mock implements _i17.TodayService {
  MockTodayService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  DateTime now() => (super.noSuchMethod(
        Invocation.method(
          #now,
          [],
        ),
        returnValue: _FakeDateTime_1(),
      ) as DateTime);
}

/// A class which mocks [SettingDatastore].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingDatastore extends _i1.Mock implements _i18.SettingDatastore {
  MockSettingDatastore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Setting> fetch() => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
        ),
        returnValue: Future<_i3.Setting>.value(_FakeSetting_2()),
      ) as _i19.Future<_i3.Setting>);
  @override
  _i19.Stream<_i3.Setting> stream() => (super.noSuchMethod(
        Invocation.method(
          #stream,
          [],
        ),
        returnValue: Stream<_i3.Setting>.empty(),
      ) as _i19.Stream<_i3.Setting>);
  @override
  _i19.Future<_i3.Setting> update(_i3.Setting? setting) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [setting],
        ),
        returnValue: Future<_i3.Setting>.value(_FakeSetting_2()),
      ) as _i19.Future<_i3.Setting>);
  @override
  void updateWithBatch(
    _i11.WriteBatch? batch,
    _i3.Setting? setting,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateWithBatch,
          [
            batch,
            setting,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Analytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalytics extends _i1.Mock implements _i20.Analytics {
  MockAnalytics() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic logEvent({
    String? name,
    Map<String, dynamic>? parameters,
  }) =>
      super.noSuchMethod(Invocation.method(
        #logEvent,
        [],
        {
          #name: name,
          #parameters: parameters,
        },
      ));
  @override
  dynamic setCurrentScreen({
    String? screenName,
    String? screenClassOverride = r'Flutter',
  }) =>
      super.noSuchMethod(Invocation.method(
        #setCurrentScreen,
        [],
        {
          #screenName: screenName,
          #screenClassOverride: screenClassOverride,
        },
      ));
  @override
  dynamic setUserProperties(
    String? name,
    dynamic value,
  ) =>
      super.noSuchMethod(Invocation.method(
        #setUserProperties,
        [
          name,
          value,
        ],
      ));
}

/// A class which mocks [DiaryDatastore].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiaryDatastore extends _i1.Mock implements _i21.DiaryDatastore {
  MockDiaryDatastore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i4.Diary> register(_i4.Diary? diary) => (super.noSuchMethod(
        Invocation.method(
          #register,
          [diary],
        ),
        returnValue: Future<_i4.Diary>.value(_FakeDiary_3()),
      ) as _i19.Future<_i4.Diary>);
  @override
  _i19.Future<_i4.Diary> update(_i4.Diary? diary) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [diary],
        ),
        returnValue: Future<_i4.Diary>.value(_FakeDiary_3()),
      ) as _i19.Future<_i4.Diary>);
  @override
  _i19.Future<_i4.Diary> delete(_i4.Diary? diary) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [diary],
        ),
        returnValue: Future<_i4.Diary>.value(_FakeDiary_3()),
      ) as _i19.Future<_i4.Diary>);
  @override
  _i19.Stream<List<_i4.Diary>> stream() => (super.noSuchMethod(
        Invocation.method(
          #stream,
          [],
        ),
        returnValue: Stream<List<_i4.Diary>>.empty(),
      ) as _i19.Stream<List<_i4.Diary>>);
}

/// A class which mocks [MenstruationDatastore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMenstruationDatastore extends _i1.Mock
    implements _i22.MenstruationDatastore {
  MockMenstruationDatastore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i5.Menstruation> fetch(String? id) => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [id],
        ),
        returnValue: Future<_i5.Menstruation>.value(_FakeMenstruation_4()),
      ) as _i19.Future<_i5.Menstruation>);
  @override
  _i19.Future<List<_i5.Menstruation>> fetchAll() => (super.noSuchMethod(
        Invocation.method(
          #fetchAll,
          [],
        ),
        returnValue: Future<List<_i5.Menstruation>>.value(<_i5.Menstruation>[]),
      ) as _i19.Future<List<_i5.Menstruation>>);
  @override
  _i19.Future<_i5.Menstruation> create(_i5.Menstruation? menstruation) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [menstruation],
        ),
        returnValue: Future<_i5.Menstruation>.value(_FakeMenstruation_4()),
      ) as _i19.Future<_i5.Menstruation>);
  @override
  _i19.Future<_i5.Menstruation> update(
    String? id,
    _i5.Menstruation? menstruation,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            id,
            menstruation,
          ],
        ),
        returnValue: Future<_i5.Menstruation>.value(_FakeMenstruation_4()),
      ) as _i19.Future<_i5.Menstruation>);
  @override
  _i19.Stream<List<_i5.Menstruation>> streamAll() => (super.noSuchMethod(
        Invocation.method(
          #streamAll,
          [],
        ),
        returnValue: Stream<List<_i5.Menstruation>>.empty(),
      ) as _i19.Stream<List<_i5.Menstruation>>);
  @override
  _i19.Stream<List<_i5.Menstruation>> streamForMonth(
          {DateTime? dateForMonth}) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamForMonth,
          [],
          {#dateForMonth: dateForMonth},
        ),
        returnValue: Stream<List<_i5.Menstruation>>.empty(),
      ) as _i19.Stream<List<_i5.Menstruation>>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i23.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Stream<_i24.User?> optionalStream() => (super.noSuchMethod(
        Invocation.method(
          #optionalStream,
          [],
        ),
        returnValue: Stream<_i24.User?>.empty(),
      ) as _i19.Stream<_i24.User?>);
  @override
  _i19.Stream<_i24.User> stream() => (super.noSuchMethod(
        Invocation.method(
          #stream,
          [],
        ),
        returnValue: Stream<_i24.User>.empty(),
      ) as _i19.Stream<_i24.User>);
  @override
  bool isLinkedApple() => (super.noSuchMethod(
        Invocation.method(
          #isLinkedApple,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  bool isLinkedGoogle() => (super.noSuchMethod(
        Invocation.method(
          #isLinkedGoogle,
          [],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [UserDatastore].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDatastore extends _i1.Mock implements _i25.UserDatastore {
  MockUserDatastore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i6.User> fetchOrCreate(String? uid) => (super.noSuchMethod(
        Invocation.method(
          #fetchOrCreate,
          [uid],
        ),
        returnValue: Future<_i6.User>.value(_FakeUser_5()),
      ) as _i19.Future<_i6.User>);
  @override
  _i19.Future<_i6.User> fetch() => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
        ),
        returnValue: Future<_i6.User>.value(_FakeUser_5()),
      ) as _i19.Future<_i6.User>);
  @override
  _i19.Stream<_i6.User> stream() => (super.noSuchMethod(
        Invocation.method(
          #stream,
          [],
        ),
        returnValue: Stream<_i6.User>.empty(),
      ) as _i19.Stream<_i6.User>);
  @override
  _i19.Future<void> updatePurchaseInfo({
    bool? isActivated,
    String? entitlementIdentifier,
    String? premiumPlanIdentifier,
    String? purchaseAppID,
    List<String>? activeSubscriptions,
    String? originalPurchaseDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePurchaseInfo,
          [],
          {
            #isActivated: isActivated,
            #entitlementIdentifier: entitlementIdentifier,
            #premiumPlanIdentifier: premiumPlanIdentifier,
            #purchaseAppID: purchaseAppID,
            #activeSubscriptions: activeSubscriptions,
            #originalPurchaseDate: originalPurchaseDate,
          },
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> syncPurchaseInfo({bool? isActivated}) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncPurchaseInfo,
          [],
          {#isActivated: isActivated},
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> deleteSettings() => (super.noSuchMethod(
        Invocation.method(
          #deleteSettings,
          [],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> setFlutterMigrationFlag() => (super.noSuchMethod(
        Invocation.method(
          #setFlutterMigrationFlag,
          [],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> registerRemoteNotificationToken(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerRemoteNotificationToken,
          [token],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> linkApple(String? email) => (super.noSuchMethod(
        Invocation.method(
          #linkApple,
          [email],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> linkGoogle(String? email) => (super.noSuchMethod(
        Invocation.method(
          #linkGoogle,
          [email],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> endInitialSetting(_i3.Setting? setting) =>
      (super.noSuchMethod(
        Invocation.method(
          #endInitialSetting,
          [setting],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> sendPremiumFunctionSurvey(
    List<_i26.PremiumFunctionSurveyElementType>? elements,
    String? message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPremiumFunctionSurvey,
          [
            elements,
            message,
          ],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> temporarySyncronizeDiscountEntitlement(_i6.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #temporarySyncronizeDiscountEntitlement,
          [user],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
}

/// A class which mocks [NotificationBarStateNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationBarStateNotifier extends _i1.Mock
    implements _i27.NotificationBarStateNotifier {
  MockNotificationBarStateNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i15.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);
  @override
  _i19.Stream<_i7.NotificationBarState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: Stream<_i7.NotificationBarState>.empty(),
      ) as _i19.Stream<_i7.NotificationBarState>);
  @override
  _i7.NotificationBarState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNotificationBarState_6(),
      ) as _i7.NotificationBarState);
  @override
  set state(_i7.NotificationBarState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.NotificationBarState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeNotificationBarState_6(),
      ) as _i7.NotificationBarState);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i19.Future<void> closeRecommendedSignupNotification() => (super.noSuchMethod(
        Invocation.method(
          #closeRecommendedSignupNotification,
          [],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> closeUserSurvey() => (super.noSuchMethod(
        Invocation.method(
          #closeUserSurvey,
          [],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> openUserSurvey() => (super.noSuchMethod(
        Invocation.method(
          #openUserSurvey,
          [],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  bool updateShouldNotify(
    _i7.NotificationBarState? old,
    _i7.NotificationBarState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i15.RemoveListener addListener(
    _i28.Listener<_i7.NotificationBarState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i15.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PremiumIntroductionStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockPremiumIntroductionStore extends _i1.Mock
    implements _i29.PremiumIntroductionStore {
  MockPremiumIntroductionStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i15.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);
  @override
  _i19.Stream<_i8.PremiumIntroductionState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: Stream<_i8.PremiumIntroductionState>.empty(),
      ) as _i19.Stream<_i8.PremiumIntroductionState>);
  @override
  _i8.PremiumIntroductionState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePremiumIntroductionState_7(),
      ) as _i8.PremiumIntroductionState);
  @override
  set state(_i8.PremiumIntroductionState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.PremiumIntroductionState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakePremiumIntroductionState_7(),
      ) as _i8.PremiumIntroductionState);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i19.Future<bool> purchase(_i30.Package? package) => (super.noSuchMethod(
        Invocation.method(
          #purchase,
          [package],
        ),
        returnValue: Future<bool>.value(false),
      ) as _i19.Future<bool>);
  @override
  bool updateShouldNotify(
    _i8.PremiumIntroductionState? old,
    _i8.PremiumIntroductionState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i15.RemoveListener addListener(
    _i28.Listener<_i8.PremiumIntroductionState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i15.RemoveListener);
}

/// A class which mocks [PillSheetModifiedHistoryDatastore].
///
/// See the documentation for Mockito's code generation for more information.
class MockPillSheetModifiedHistoryDatastore extends _i1.Mock
    implements _i31.PillSheetModifiedHistoryDatastore {
  MockPillSheetModifiedHistoryDatastore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<List<_i32.PillSheetModifiedHistory>> fetchList(
    DateTime? after,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchList,
          [
            after,
            limit,
          ],
        ),
        returnValue: Future<List<_i32.PillSheetModifiedHistory>>.value(
            <_i32.PillSheetModifiedHistory>[]),
      ) as _i19.Future<List<_i32.PillSheetModifiedHistory>>);
  @override
  _i19.Future<List<_i32.PillSheetModifiedHistory>> fetchAll() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAll,
          [],
        ),
        returnValue: Future<List<_i32.PillSheetModifiedHistory>>.value(
            <_i32.PillSheetModifiedHistory>[]),
      ) as _i19.Future<List<_i32.PillSheetModifiedHistory>>);
  @override
  _i19.Future<void> update(
          _i32.PillSheetModifiedHistory? pillSheetModifiedHistory) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [pillSheetModifiedHistory],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Stream<List<_i32.PillSheetModifiedHistory>> stream(int? limit) =>
      (super.noSuchMethod(
        Invocation.method(
          #stream,
          [limit],
        ),
        returnValue: Stream<List<_i32.PillSheetModifiedHistory>>.empty(),
      ) as _i19.Stream<List<_i32.PillSheetModifiedHistory>>);
  @override
  void add(
    _i11.WriteBatch? batch,
    _i32.PillSheetModifiedHistory? history,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #add,
          [
            batch,
            history,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PillSheetGroupDatastore].
///
/// See the documentation for Mockito's code generation for more information.
class MockPillSheetGroupDatastore extends _i1.Mock
    implements _i33.PillSheetGroupDatastore {
  MockPillSheetGroupDatastore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i9.PillSheetGroup?> fetchLatest() => (super.noSuchMethod(
        Invocation.method(
          #fetchLatest,
          [],
        ),
        returnValue: Future<_i9.PillSheetGroup?>.value(),
      ) as _i19.Future<_i9.PillSheetGroup?>);
  @override
  _i19.Future<_i9.PillSheetGroup?> fetchBeforePillSheetGroup() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchBeforePillSheetGroup,
          [],
        ),
        returnValue: Future<_i9.PillSheetGroup?>.value(),
      ) as _i19.Future<_i9.PillSheetGroup?>);
  @override
  _i19.Stream<_i9.PillSheetGroup?> latestPillSheetGroupStream() =>
      (super.noSuchMethod(
        Invocation.method(
          #latestPillSheetGroupStream,
          [],
        ),
        returnValue: Stream<_i9.PillSheetGroup?>.empty(),
      ) as _i19.Stream<_i9.PillSheetGroup?>);
  @override
  _i9.PillSheetGroup register(
    _i11.WriteBatch? batch,
    _i9.PillSheetGroup? pillSheetGroup,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            batch,
            pillSheetGroup,
          ],
        ),
        returnValue: _FakePillSheetGroup_8(),
      ) as _i9.PillSheetGroup);
  @override
  _i9.PillSheetGroup delete(
    _i11.WriteBatch? batch,
    _i9.PillSheetGroup? pillSheetGroup,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [
            batch,
            pillSheetGroup,
          ],
        ),
        returnValue: _FakePillSheetGroup_8(),
      ) as _i9.PillSheetGroup);
  @override
  _i19.Future<void> update(_i9.PillSheetGroup? pillSheetGroup) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [pillSheetGroup],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  void updateWithBatch(
    _i11.WriteBatch? batch,
    _i9.PillSheetGroup? pillSheetGroup,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateWithBatch,
          [
            batch,
            pillSheetGroup,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BatchFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockBatchFactory extends _i1.Mock implements _i34.BatchFactory {
  MockBatchFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.DatabaseConnection get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseConnection_9(),
      ) as _i10.DatabaseConnection);
  @override
  _i11.WriteBatch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeWriteBatch_10(),
      ) as _i11.WriteBatch);
}

/// A class which mocks [WriteBatch].
///
/// See the documentation for Mockito's code generation for more information.
class MockWriteBatch extends _i1.Mock implements _i11.WriteBatch {
  MockWriteBatch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<void> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  void delete(_i11.DocumentReference<Object?>? document) => super.noSuchMethod(
        Invocation.method(
          #delete,
          [document],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void set<T>(
    _i11.DocumentReference<T>? document,
    T? data, [
    _i11.SetOptions? options,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #set,
          [
            document,
            data,
            options,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void update(
    _i11.DocumentReference<Object?>? document,
    Map<String, dynamic>? data,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [
            document,
            data,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SettingPageAsyncAction].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingPageAsyncAction extends _i1.Mock
    implements _i14.SettingPageAsyncAction {
  MockSettingPageAsyncAction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<void> addReminderTimes({
    _i3.Setting? setting,
    _i3.ReminderTime? reminderTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addReminderTimes,
          [],
          {
            #setting: setting,
            #reminderTime: reminderTime,
          },
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> editReminderTime({
    int? index,
    _i3.Setting? setting,
    _i3.ReminderTime? reminderTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editReminderTime,
          [],
          {
            #index: index,
            #setting: setting,
            #reminderTime: reminderTime,
          },
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> deleteReminderTimes({
    int? index,
    _i3.Setting? setting,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteReminderTimes,
          [],
          {
            #index: index,
            #setting: setting,
          },
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> modifyIsOnReminder(
    bool? isOnReminder,
    _i3.Setting? setting,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #modifyIsOnReminder,
          [
            isOnReminder,
            setting,
          ],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> modifyIsOnNotifyInNotTakenDuration(
    bool? isOn,
    _i3.Setting? setting,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #modifyIsOnNotifyInNotTakenDuration,
          [
            isOn,
            setting,
          ],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> deletePillSheet({
    _i9.PillSheetGroup? latestPillSheetGroup,
    _i2.PillSheet? activedPillSheet,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePillSheet,
          [],
          {
            #latestPillSheetGroup: latestPillSheetGroup,
            #activedPillSheet: activedPillSheet,
          },
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> modifiyIsAutomaticallyCreatePillSheet(
    bool? isOn,
    _i3.Setting? setting,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #modifiyIsAutomaticallyCreatePillSheet,
          [
            isOn,
            setting,
          ],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> reminderNotificationWordSubmit(
    String? word,
    _i3.Setting? setting,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #reminderNotificationWordSubmit,
          [
            word,
            setting,
          ],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> setIsInVisibleReminderDate(
    bool? isInVisibleReminderDate,
    _i3.Setting? setting,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIsInVisibleReminderDate,
          [
            isInVisibleReminderDate,
            setting,
          ],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> setIsInVisiblePillNumber(
    bool? isInVisiblePillNumber,
    _i3.Setting? setting,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIsInVisiblePillNumber,
          [
            isInVisiblePillNumber,
            setting,
          ],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> setIsInVisibleDescription(
    bool? isInVisibleDescription,
    _i3.Setting? setting,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIsInVisibleDescription,
          [
            isInVisibleDescription,
            setting,
          ],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
  @override
  _i19.Future<void> updateTimezoneDatabaseName({
    _i3.Setting? setting,
    String? timezoneDatabaseName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTimezoneDatabaseName,
          [],
          {
            #setting: setting,
            #timezoneDatabaseName: timezoneDatabaseName,
          },
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
}

/// A class which mocks [MenstruationPageAsyncAction].
///
/// See the documentation for Mockito's code generation for more information.
class MockMenstruationPageAsyncAction extends _i1.Mock
    implements _i35.MenstruationPageAsyncAction {
  MockMenstruationPageAsyncAction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i5.Menstruation> recordFromToday({_i3.Setting? setting}) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordFromToday,
          [],
          {#setting: setting},
        ),
        returnValue: Future<_i5.Menstruation>.value(_FakeMenstruation_4()),
      ) as _i19.Future<_i5.Menstruation>);
  @override
  _i19.Future<_i5.Menstruation> recordFromYesterday({_i3.Setting? setting}) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordFromYesterday,
          [],
          {#setting: setting},
        ),
        returnValue: Future<_i5.Menstruation>.value(_FakeMenstruation_4()),
      ) as _i19.Future<_i5.Menstruation>);
}

/// A class which mocks [MenstruationEditPageAsyncAction].
///
/// See the documentation for Mockito's code generation for more information.
class MockMenstruationEditPageAsyncAction extends _i1.Mock
    implements _i36.MenstruationEditPageAsyncAction {
  MockMenstruationEditPageAsyncAction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i5.Menstruation> save({
    _i5.Menstruation? initialMenstruation,
    _i5.Menstruation? menstruation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [],
          {
            #initialMenstruation: initialMenstruation,
            #menstruation: menstruation,
          },
        ),
        returnValue: Future<_i5.Menstruation>.value(_FakeMenstruation_4()),
      ) as _i19.Future<_i5.Menstruation>);
  @override
  _i19.Future<void> delete({
    _i5.Menstruation? initialMenstruation,
    _i5.Menstruation? menstruation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #initialMenstruation: initialMenstruation,
            #menstruation: menstruation,
          },
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
}

/// A class which mocks [CalendarPageAsyncAction].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarPageAsyncAction extends _i1.Mock
    implements _i37.CalendarPageAsyncAction {
  MockCalendarPageAsyncAction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<void> editTakenValue(
    DateTime? actualTakenDate,
    _i32.PillSheetModifiedHistory? history,
    _i38.PillSheetModifiedHistoryValue? value,
    _i38.TakenPillValue? takenPillValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editTakenValue,
          [
            actualTakenDate,
            history,
            value,
            takenPillValue,
          ],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
}

/// A class which mocks [PremiumAndTrial].
///
/// See the documentation for Mockito's code generation for more information.
class MockPremiumAndTrial extends _i1.Mock implements _i12.PremiumAndTrial {
  MockPremiumAndTrial() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get trialIsAlreadyBegin => (super.noSuchMethod(
        Invocation.getter(#trialIsAlreadyBegin),
        returnValue: false,
      ) as bool);
  @override
  bool get premiumOrTrial => (super.noSuchMethod(
        Invocation.getter(#premiumOrTrial),
        returnValue: false,
      ) as bool);
  @override
  bool get isNotYetStartTrial => (super.noSuchMethod(
        Invocation.getter(#isNotYetStartTrial),
        returnValue: false,
      ) as bool);
  @override
  bool get isTrial => (super.noSuchMethod(
        Invocation.getter(#isTrial),
        returnValue: false,
      ) as bool);
  @override
  bool get isPremium => (super.noSuchMethod(
        Invocation.getter(#isPremium),
        returnValue: false,
      ) as bool);
  @override
  bool get hasDiscountEntitlement => (super.noSuchMethod(
        Invocation.getter(#hasDiscountEntitlement),
        returnValue: false,
      ) as bool);
  @override
  _i12.$PremiumAndTrialCopyWith<_i12.PremiumAndTrial> get copyWith =>
      (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$PremiumAndTrialCopyWith_11<_i12.PremiumAndTrial>(),
      ) as _i12.$PremiumAndTrialCopyWith<_i12.PremiumAndTrial>);
}

/// A class which mocks [Setting].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetting extends _i1.Mock implements _i3.Setting {
  MockSetting() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i39.PillSheetType> get pillSheetEnumTypes => (super.noSuchMethod(
        Invocation.getter(#pillSheetEnumTypes),
        returnValue: <_i39.PillSheetType>[],
      ) as List<_i39.PillSheetType>);
  @override
  List<_i39.PillSheetType?> get pillSheetTypes => (super.noSuchMethod(
        Invocation.getter(#pillSheetTypes),
        returnValue: <_i39.PillSheetType?>[],
      ) as List<_i39.PillSheetType?>);
  @override
  int get pillNumberForFromMenstruation => (super.noSuchMethod(
        Invocation.getter(#pillNumberForFromMenstruation),
        returnValue: 0,
      ) as int);
  @override
  int get durationMenstruation => (super.noSuchMethod(
        Invocation.getter(#durationMenstruation),
        returnValue: 0,
      ) as int);
  @override
  List<_i3.ReminderTime> get reminderTimes => (super.noSuchMethod(
        Invocation.getter(#reminderTimes),
        returnValue: <_i3.ReminderTime>[],
      ) as List<_i3.ReminderTime>);
  @override
  bool get isOnReminder => (super.noSuchMethod(
        Invocation.getter(#isOnReminder),
        returnValue: false,
      ) as bool);
  @override
  bool get isOnNotifyInNotTakenDuration => (super.noSuchMethod(
        Invocation.getter(#isOnNotifyInNotTakenDuration),
        returnValue: false,
      ) as bool);
  @override
  _i3.PillSheetAppearanceMode get pillSheetAppearanceMode =>
      (super.noSuchMethod(
        Invocation.getter(#pillSheetAppearanceMode),
        returnValue: _i3.PillSheetAppearanceMode.number,
      ) as _i3.PillSheetAppearanceMode);
  @override
  bool get isAutomaticallyCreatePillSheet => (super.noSuchMethod(
        Invocation.getter(#isAutomaticallyCreatePillSheet),
        returnValue: false,
      ) as bool);
  @override
  _i13.ReminderNotificationCustomization
      get reminderNotificationCustomization => (super.noSuchMethod(
            Invocation.getter(#reminderNotificationCustomization),
            returnValue: _FakeReminderNotificationCustomization_12(),
          ) as _i13.ReminderNotificationCustomization);
  @override
  _i3.$SettingCopyWith<_i3.Setting> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$SettingCopyWith_13<_i3.Setting>(),
      ) as _i3.$SettingCopyWith<_i3.Setting>);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [SettingStateNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingStateNotifier extends _i1.Mock
    implements _i40.SettingStateNotifier {
  MockSettingStateNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.SettingPageAsyncAction get asyncAction => (super.noSuchMethod(
        Invocation.getter(#asyncAction),
        returnValue: _FakeSettingPageAsyncAction_14(),
      ) as _i14.SettingPageAsyncAction);
  @override
  set onError(_i15.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);
  @override
  _i19.Stream<_i15.AsyncValue<_i41.SettingState>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: Stream<_i15.AsyncValue<_i41.SettingState>>.empty(),
      ) as _i19.Stream<_i15.AsyncValue<_i41.SettingState>>);
  @override
  _i15.AsyncValue<_i41.SettingState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_15<_i41.SettingState>(),
      ) as _i15.AsyncValue<_i41.SettingState>);
  @override
  set state(_i15.AsyncValue<_i41.SettingState>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i15.AsyncValue<_i41.SettingState> get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeAsyncValue_15<_i41.SettingState>(),
      ) as _i15.AsyncValue<_i41.SettingState>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  bool updateShouldNotify(
    _i15.AsyncValue<_i41.SettingState>? old,
    _i15.AsyncValue<_i41.SettingState>? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i15.RemoveListener addListener(
    _i28.Listener<_i15.AsyncValue<_i41.SettingState>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i15.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BatchSetPillSheetGroup].
///
/// See the documentation for Mockito's code generation for more information.
class MockBatchSetPillSheetGroup extends _i1.Mock
    implements _i42.BatchSetPillSheetGroup {
  MockBatchSetPillSheetGroup() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.DatabaseConnection get databaseConnection => (super.noSuchMethod(
        Invocation.getter(#databaseConnection),
        returnValue: _FakeDatabaseConnection_9(),
      ) as _i10.DatabaseConnection);
  @override
  _i9.PillSheetGroup call(
    _i11.WriteBatch? batch,
    _i9.PillSheetGroup? pillSheetGroup,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            batch,
            pillSheetGroup,
          ],
        ),
        returnValue: _FakePillSheetGroup_8(),
      ) as _i9.PillSheetGroup);
}

/// A class which mocks [BatchSetPillSheets].
///
/// See the documentation for Mockito's code generation for more information.
class MockBatchSetPillSheets extends _i1.Mock
    implements _i43.BatchSetPillSheets {
  MockBatchSetPillSheets() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.DatabaseConnection get databaseConnection => (super.noSuchMethod(
        Invocation.getter(#databaseConnection),
        returnValue: _FakeDatabaseConnection_9(),
      ) as _i10.DatabaseConnection);
  @override
  List<_i2.PillSheet> call(
    _i11.WriteBatch? batch,
    List<_i2.PillSheet>? pillSheets,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            batch,
            pillSheets,
          ],
        ),
        returnValue: <_i2.PillSheet>[],
      ) as List<_i2.PillSheet>);
}

/// A class which mocks [BatchSetPillSheetModifiedHistory].
///
/// See the documentation for Mockito's code generation for more information.
class MockBatchSetPillSheetModifiedHistory extends _i1.Mock
    implements _i44.BatchSetPillSheetModifiedHistory {
  MockBatchSetPillSheetModifiedHistory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.DatabaseConnection get databaseConnection => (super.noSuchMethod(
        Invocation.getter(#databaseConnection),
        returnValue: _FakeDatabaseConnection_9(),
      ) as _i10.DatabaseConnection);
  @override
  void call(
    _i11.WriteBatch? batch,
    _i32.PillSheetModifiedHistory? history,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #call,
          [
            batch,
            history,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SetSetting].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetSetting extends _i1.Mock implements _i45.SetSetting {
  MockSetSetting() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.DatabaseConnection get databaseConnection => (super.noSuchMethod(
        Invocation.getter(#databaseConnection),
        returnValue: _FakeDatabaseConnection_9(),
      ) as _i10.DatabaseConnection);
  @override
  _i19.Future<void> call(_i3.Setting? setting) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [setting],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
}

/// A class which mocks [SetPillSheetGroup].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetPillSheetGroup extends _i1.Mock implements _i42.SetPillSheetGroup {
  MockSetPillSheetGroup() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.DatabaseConnection get databaseConnection => (super.noSuchMethod(
        Invocation.getter(#databaseConnection),
        returnValue: _FakeDatabaseConnection_9(),
      ) as _i10.DatabaseConnection);
  @override
  _i19.Future<void> call(_i9.PillSheetGroup? pillSheetGroup) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [pillSheetGroup],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as _i19.Future<void>);
}

/// A class which mocks [DatabaseConnection].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseConnection extends _i1.Mock
    implements _i10.DatabaseConnection {
  MockDatabaseConnection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get userID => (super.noSuchMethod(
        Invocation.getter(#userID),
        returnValue: '',
      ) as String);
  @override
  _i11.DocumentReference<_i6.User> userReference() => (super.noSuchMethod(
        Invocation.method(
          #userReference,
          [],
        ),
        returnValue: _FakeDocumentReference_16<_i6.User>(),
      ) as _i11.DocumentReference<_i6.User>);
  @override
  _i11.DocumentReference<Object?> userRawReference() => (super.noSuchMethod(
        Invocation.method(
          #userRawReference,
          [],
        ),
        returnValue: _FakeDocumentReference_16<Object?>(),
      ) as _i11.DocumentReference<Object?>);
  @override
  _i11.DocumentReference<_i46.DiarySetting> diarySettingReference() =>
      (super.noSuchMethod(
        Invocation.method(
          #diarySettingReference,
          [],
        ),
        returnValue: _FakeDocumentReference_16<_i46.DiarySetting>(),
      ) as _i11.DocumentReference<_i46.DiarySetting>);
  @override
  _i11.CollectionReference<_i2.PillSheet> pillSheetsReference() =>
      (super.noSuchMethod(
        Invocation.method(
          #pillSheetsReference,
          [],
        ),
        returnValue: _FakeCollectionReference_17<_i2.PillSheet>(),
      ) as _i11.CollectionReference<_i2.PillSheet>);
  @override
  _i11.DocumentReference<_i2.PillSheet> pillSheetReference(
          String? pillSheetID) =>
      (super.noSuchMethod(
        Invocation.method(
          #pillSheetReference,
          [pillSheetID],
        ),
        returnValue: _FakeDocumentReference_16<_i2.PillSheet>(),
      ) as _i11.DocumentReference<_i2.PillSheet>);
  @override
  _i11.CollectionReference<_i4.Diary> diariesReference() => (super.noSuchMethod(
        Invocation.method(
          #diariesReference,
          [],
        ),
        returnValue: _FakeCollectionReference_17<_i4.Diary>(),
      ) as _i11.CollectionReference<_i4.Diary>);
  @override
  _i11.DocumentReference<_i4.Diary> diaryReference(_i4.Diary? diary) =>
      (super.noSuchMethod(
        Invocation.method(
          #diaryReference,
          [diary],
        ),
        returnValue: _FakeDocumentReference_16<_i4.Diary>(),
      ) as _i11.DocumentReference<_i4.Diary>);
  @override
  _i11.DocumentReference<Object?> userPrivateRawReference() =>
      (super.noSuchMethod(
        Invocation.method(
          #userPrivateRawReference,
          [],
        ),
        returnValue: _FakeDocumentReference_16<Object?>(),
      ) as _i11.DocumentReference<Object?>);
  @override
  _i11.CollectionReference<_i5.Menstruation> menstruationsReference() =>
      (super.noSuchMethod(
        Invocation.method(
          #menstruationsReference,
          [],
        ),
        returnValue: _FakeCollectionReference_17<_i5.Menstruation>(),
      ) as _i11.CollectionReference<_i5.Menstruation>);
  @override
  _i11.DocumentReference<_i5.Menstruation> menstruationReference(
          String? menstruationID) =>
      (super.noSuchMethod(
        Invocation.method(
          #menstruationReference,
          [menstruationID],
        ),
        returnValue: _FakeDocumentReference_16<_i5.Menstruation>(),
      ) as _i11.DocumentReference<_i5.Menstruation>);
  @override
  _i11.CollectionReference<_i32.PillSheetModifiedHistory>
      pillSheetModifiedHistoriesReference() => (super.noSuchMethod(
            Invocation.method(
              #pillSheetModifiedHistoriesReference,
              [],
            ),
            returnValue:
                _FakeCollectionReference_17<_i32.PillSheetModifiedHistory>(),
          ) as _i11.CollectionReference<_i32.PillSheetModifiedHistory>);
  @override
  _i11.DocumentReference<_i32.PillSheetModifiedHistory>
      pillSheetModifiedHistoryReference({String? pillSheetModifiedHistoryID}) =>
          (super.noSuchMethod(
            Invocation.method(
              #pillSheetModifiedHistoryReference,
              [],
              {#pillSheetModifiedHistoryID: pillSheetModifiedHistoryID},
            ),
            returnValue:
                _FakeDocumentReference_16<_i32.PillSheetModifiedHistory>(),
          ) as _i11.DocumentReference<_i32.PillSheetModifiedHistory>);
  @override
  _i11.CollectionReference<_i9.PillSheetGroup> pillSheetGroupsReference() =>
      (super.noSuchMethod(
        Invocation.method(
          #pillSheetGroupsReference,
          [],
        ),
        returnValue: _FakeCollectionReference_17<_i9.PillSheetGroup>(),
      ) as _i11.CollectionReference<_i9.PillSheetGroup>);
  @override
  _i11.DocumentReference<_i9.PillSheetGroup> pillSheetGroupReference(
          String? pillSheetGroupID) =>
      (super.noSuchMethod(
        Invocation.method(
          #pillSheetGroupReference,
          [pillSheetGroupID],
        ),
        returnValue: _FakeDocumentReference_16<_i9.PillSheetGroup>(),
      ) as _i11.DocumentReference<_i9.PillSheetGroup>);
  @override
  _i11.CollectionReference<_i47.Schedule> schedulesReference() =>
      (super.noSuchMethod(
        Invocation.method(
          #schedulesReference,
          [],
        ),
        returnValue: _FakeCollectionReference_17<_i47.Schedule>(),
      ) as _i11.CollectionReference<_i47.Schedule>);
  @override
  _i11.DocumentReference<_i47.Schedule> scheduleReference(String? scheduleID) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleReference,
          [scheduleID],
        ),
        returnValue: _FakeDocumentReference_16<_i47.Schedule>(),
      ) as _i11.DocumentReference<_i47.Schedule>);
  @override
  _i11.DocumentReference<_i48.PilllAds?> pilllAds() => (super.noSuchMethod(
        Invocation.method(
          #pilllAds,
          [],
        ),
        returnValue: _FakeDocumentReference_16<_i48.PilllAds?>(),
      ) as _i11.DocumentReference<_i48.PilllAds?>);
  @override
  _i19.Future<T> transaction<T>(
          _i11.TransactionHandler<T>? transactionHandler) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [transactionHandler],
        ),
        returnValue: Future<T>.value(null),
      ) as _i19.Future<T>);
  @override
  _i11.WriteBatch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeWriteBatch_10(),
      ) as _i11.WriteBatch);
}
